public class SingleLinkedList {
Node head, tail;
boolean isEmpty() {
return head == null;
}
void print() {
if(!isEmpty()) {
Node tmp = head;
System.out.println("Isi Linked List");
while(tmp != null) {
System.out.println(tmp.data + "\t");
tmp = tmp.next;
}
System.out.println("");
} else {
System.out.println("Linked List kosong");
}
}
void addFirst(int input) {
Node ndInput = new Node(input, null);
if(isEmpty()) {
head = ndInput;
tail = ndInput;
} else {
ndInput.next = head;
head = ndInput;
}
}
void addLast(int input) {
Node ndInput = new Node(input, null);
if(isEmpty()) {
head = ndInput;
tail = ndInput;
} else {
tail.next = ndInput;
tail = ndInput;
}
}
void insertAfter(int key, int input) {
Node ndInput = new Node(input, null);
Node temp = head;
do {
if(temp.data == key) {
ndInput.next = temp.next;
temp.next = ndInput;
if (ndInput.next == null) {
tail = ndInput;
}
break;
}
temp = temp.next;
} while(temp != null);
}
void insertAt(int index, int input) {
if (index < 0) {
System.out.println("Index tidak valid!");
} else if(index == 0){
addFirst(input);
} else {
Node temp = head;
for(int i = 0; i < index - 1; i++) {
temp = temp.next;
}
temp.next = new Node(input, temp.next);
if(temp.next.next == null) {
tail = temp.next;
}
}
}
int getData(int index) {
if (index < 0) {
System.out.println("Index tidak valid!");
return -1;
} else {
Node tmp = head;
for (int i = 0; i < index; i++) {
if (tmp == null) {
System.out.println("Index melebihi panjang linked list!");
return -1;
}
tmp = tmp.next;
}
if (tmp == null) {
System.out.println("Index melebihi panjang linked list!");
return -1;
}
return tmp.data;
}
}
int indexOf(int key) {
Node tmp = head;
int index = 0;
while (tmp != null && tmp.data != key) {
tmp = tmp.next;
index++;
}
if (tmp == null) {
return -1;
} else {
return index;
}
}
void removeFirst() {
if (!isEmpty()) {
if (head == tail) {
head = tail = null;
} else {
head = head.next;
}
} else {
System.out.println("Linked list masih kosong, tidak dapat 
dihapus");
}
}
void removeLast() {
if (!isEmpty()) {
if (head == tail) {
head = tail = null;
} else {
Node temp = head;
while (temp.next != tail) {
temp = temp.next;
}
temp.next = null;
tail = temp;
}
} else {
System.out.println("Linked list masih kosong, tidak dapat 
dihapus");
}
}
void remove(int key) {
if (!isEmpty()) {
if (head.data == key) {
removeFirst();
} else {
Node temp = head;
while (temp.next != null) {
if (temp.next.data == key) {
temp.next = temp.next.next;
if (temp.next == null) {
tail = temp;
}
break;
}
temp = temp.next;
}
}
} else {
System.out.println("Linked list masih kosong, tidak dapat 
dihapus");
}
}
void removeAt(int index) {
if (index < 0) {
System.out.println("Index tidak valid!");
} else if (index == 0) {
removeFirst();
} else {
Node temp = head;
for (int i = 0; i < index - 1; i++) {
if (temp.next == null) {
System.out.println("Index melebihi panjang linked list!");
return;
}
temp = temp.next;
}
if (temp.next != null) {
temp.next = temp.next.next;
if (temp.next == null) {
tail = temp;
}
} else {
System.out.println("Index melebihi panjang linked list!");
}
}
}
}
